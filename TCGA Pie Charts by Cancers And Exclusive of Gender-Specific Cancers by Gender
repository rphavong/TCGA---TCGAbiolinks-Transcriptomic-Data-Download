---
title: "TCGA Pie Charts by Cancers And Exclusive of Gender-Specific Cancers by Gender"
author: "Robert Phavong"
date: "2024-10-23"
output: html_document
---

### This contains all pie charts of inferred sex chromosome complements distributions between genders and by individual Cancer Types
##### Purpose is to see each cancer types complement distributions within each cancer type (individually)

### This also contains the filtered out pie charts that excludes the Gender-Specific cancers in FEMALE's and MALE's
##### Purpose is to see if there are changes in complements distributions when gender-specific cancers are excluded


## Set options for printing reports
```{r Printoptions}
# this will make sure that the code doesn't run off the page when printing a report
knitr::opts_chunk$set(tidy.opts = list(width.cutoff = 50), tidy = TRUE)
```

## Set options to prevent plots from being cut off when printing report
```{r setup, include=FALSE}
knitr::opts_chunk$set(fig.width=8, fig.height=6)
```


# Load required libraries
```{r}
library(dplyr)
library(ggplot2)
library(tidyr)
library(tibble)
library(ggrepel) # used to adjust labels in pie charts 
```


# Set working directory
```{r}
# Specify the directory
working_path_pie_charts <- "/home/rphavong/BIO_593_AppliedProject_CCLE/TCGA_PieCharts_BrokenDown/"

setwd(working_path_pie_charts)

working_path_pie_charts <- "/home/rphavong/BIO_593_AppliedProject_CCLE/TCGA_PieCharts_BrokenDown/"
```


# Import CSV file with all cancers of interest, cases, and genes of interest (XIST, 7 Y-linked genes)
```{r}
all_cancers_sex_genes_tpm <- read.csv("inferred_sex_chromosome_complement_age.csv", header = TRUE)
```


## Pie Charts of GBM
## Pie Charts for Conservative Calls
```{r}
# Get a vector of unique Cancer.Type values
cancer_types <- unique(all_cancers_sex_genes_tpm$Cancer.Type)

# Loop through each Cancer.Type and run the same pipeline
for (cancer in cancer_types) {
  
  ## FEMALES
  # Filter FEMALE samples and Primary Tumor sample type for each Cancer.Type
  female_data_pie_conservative <- all_cancers_sex_genes_tpm %>%
    filter(gender == "FEMALE", sample_type == "Primary Tumor", Cancer.Type == cancer)
  
  # Calculate total number of FEMALEs for the current Cancer.Type
  total_females_pie_conservative <- female_data_pie_conservative %>%
    filter(gender == "FEMALE") %>%
    nrow()
  
  # If no females in this cancer type, skip the loop
  if (total_females_pie_conservative == 0) {
    next
  }
  
  # Summarize the count of each 'conservative_calls' category within FEMALE samples
  female_counts_pie_conservative <- female_data_pie_conservative %>%
    group_by(conservative_calls) %>%
    summarize(count = n()) %>%
    mutate(percentage = (count / total_females_pie_conservative) * 100)
  
  # Define the custom color scheme as a named vector (reused for all cancer types)
  color_scheme_females <- c(
    "XaXi" = "lightgreen",
    "XO/XaXa" = "purple",
    "XY" = "lightgreen",
    "X" = "purple",
    "XO/XaXa Y" = "grey",
    "XaXi Y" = "grey"
  )
  
  # Create the pie chart with custom colors for the current Cancer.Type
  p <- ggplot(female_counts_pie_conservative, aes(x = "", y = count, fill = conservative_calls)) +
    geom_bar(stat = "identity", width = 1) +
    coord_polar(theta = "y") +  # Convert the bar chart into a pie chart
    theme_void() +  # Remove background, gridlines, and axis
    labs(title = paste0("TCGA Inferred Sex Chromosome Complements Distribution in FEMALE Samples\n",
                        "(Conservative Calls for ", cancer, ")")) +
    scale_fill_manual(values = color_scheme_females) +  # Apply custom color scheme
    geom_text(aes(label = paste0(round(percentage, 1), "%")),  # Display percentage labels
              position = position_stack(vjust = 0.5), size = 3)  # Adjust label position and size
  
  ## Print the plot in RStudio
  print(p)
  
}
```





# Adding labels to pie chart above
```{r}
# Get a vector of unique Cancer.Type values
cancer_types <- unique(all_cancers_sex_genes_tpm$Cancer.Type)

# Loop through each Cancer.Type and run the same pipeline
for (cancer in cancer_types) {
  
  ## FEMALES
  # Filter FEMALE samples and Primary Tumor sample type for each Cancer.Type
  female_data_pie_conservative <- all_cancers_sex_genes_tpm %>%
    filter(gender == "FEMALE", sample_type == "Primary Tumor", Cancer.Type == cancer)
  
  # Calculate total number of FEMALEs for the current Cancer.Type
  total_females_pie_conservative <- female_data_pie_conservative %>%
    filter(gender == "FEMALE") %>%
    nrow()
  
  # If no females in this cancer type, skip the loop
  if (total_females_pie_conservative == 0) {
    next
  }
  
  # Summarize the count of each 'conservative_calls' category within FEMALE samples
  female_counts_pie_conservative <- female_data_pie_conservative %>%
    group_by(conservative_calls) %>%
    summarize(count = n()) %>%
    mutate(percentage = (count / total_females_pie_conservative) * 100)
  
  # Modify the custom labels in the data frame
  female_counts_pie_conservative <- female_counts_pie_conservative %>%
    mutate(
      conservative_calls = factor(conservative_calls, levels = c("XaXi", "XO/XaXa", "XaXi Y", "XO/XaXa Y")),
      label = case_when(
        conservative_calls == "XaXi" ~ paste0("High XIST, XaXi: ", round(percentage, 2), "%"),
        conservative_calls == "XO/XaXa" ~ paste0("XaXa or XaO: ", round(percentage, 2), "%"),
        conservative_calls == "XaXi Y" ~ paste0("High XIST, Y expressed: ", round(percentage, 2), "%"),
        conservative_calls == "XO/XaXa Y" ~ paste0("XaXa or XaO, Y expressed: ", round(percentage, 2), "%"),
        TRUE ~ paste0(round(percentage, 1), "%")  # Default for other categories
      )
    )
  
  # Define the custom color scheme as a named vector (reused for all cancer types)
  color_scheme_females <- c(
    "XaXi" = "lightgreen",
    "XO/XaXa" = "purple",
    "XY" = "lightgreen",
    "X" = "purple",
    "XO/XaXa Y" = "grey",
    "XaXi Y" = "grey"
  )
  
  # Create the pie charts
  p <- ggplot(female_counts_pie_conservative, aes(x = "", y = count, fill = conservative_calls)) +
    geom_bar(stat = "identity", width = 1, color = "black") +  # Add black lines between the slices
    coord_polar(theta = "y") +  # Convert the bar chart into a pie chart
    theme_void() +  # Remove background, gridlines, and axis
    labs(title = paste0("TCGA Inferred Sex Chromosome Complements Distribution in FEMALE Samples \n",
                        "(Conservative Calls for ", cancer, ")")) +
    
    # Apply custom color scheme and custom legend labels
    scale_fill_manual(
      values = color_scheme_females,  # Custom color scheme
      labels = c(
        "XaXi" = "XIST expressed and chrY not expressed",
        "XO/XaXa" = "XIST not expressed and chrY not expressed",
        "XaXi Y" = "XIST expressed and chrY expressed",
        "XO/XaXa Y" = "XIST not expressed and chrY expressed"
      )
    ) +  
  
    # Add custom labels for respective complements
    geom_text(aes(label = label), position = position_stack(vjust = 0.5), size = 2,
              data = subset(female_counts_pie_conservative, conservative_calls %in% c("XO/XaXa", "XaXi")))  +
    
    geom_label_repel(aes(label = label), position = position_stack(vjust = 0.5), size = 2, show.legend = FALSE,
                     data = subset(female_counts_pie_conservative, conservative_calls %in% c("XO/XaXa Y", "XaXi Y")))
  
  # Print the plot
  print(p)
  
  # Save the pie charts
  ggsave(filename = paste0("conservative_females_piechart_", cancer, ".png"), plot = p, dpi = 300)
  ggsave(filename = paste0("conservative_females_piechart_", cancer, ".pdf"), plot = p)
  
}
```






## MALE's
```{r}
## MALES
# Get a vector of unique Cancer.Type values
cancer_types <- unique(all_cancers_sex_genes_tpm$Cancer.Type)

# Loop through each Cancer.Type and run the same pipeline
for (cancer in cancer_types) {
  
  ## FEMALES
  # Filter FEMALE samples and Primary Tumor sample type for each Cancer.Type
  male_data_pie_conservative <- all_cancers_sex_genes_tpm %>%
    filter(gender == "MALE", sample_type == "Primary Tumor", Cancer.Type == cancer)
  
  # Calculate total number of FEMALEs for the current Cancer.Type
  total_males_pie_conservative <- male_data_pie_conservative %>%
    filter(gender == "MALE") %>%
    nrow()
  
  # If no females in this cancer type, skip the loop
  if (total_males_pie_conservative == 0) {
    next
  }
  
  # Summarize the count of each 'conservative_calls' category within FEMALE samples
  male_counts_pie_conservative <- male_data_pie_conservative %>%
    group_by(conservative_calls) %>%
    summarize(count = n()) %>%
    mutate(percentage = (count / total_males_pie_conservative) * 100)
  
  # Define the custom color scheme as a named vector (reused for all cancer types)
  color_scheme_males <- c(
    "XaXi" = "grey",
    "XO/XaXa" = "purple",
    "XY" = "lightgreen",
    "X" = "purple",
    "XO/XaXa Y" = "grey",
    "XaXi Y" = "grey"
  )
  
  # Create the pie chart with custom colors for the current Cancer.Type
  m <- ggplot(male_counts_pie_conservative, aes(x = "", y = count, fill = conservative_calls)) +
    geom_bar(stat = "identity", width = 1) +
    coord_polar(theta = "y") +  # Convert the bar chart into a pie chart
    theme_void() +  # Remove background, gridlines, and axis
    labs(title = paste0("TCGA Inferred Sex Chromosome Complements Distribution in MALE Samples\n",
                        "(Conservative Calls for ", cancer, ")")) +
    scale_fill_manual(values = color_scheme_males) +  # Apply custom color scheme
    geom_text(aes(label = paste0(round(percentage, 1), "%")),  # Display percentage labels
              position = position_stack(vjust = 0.5), size = 3)  # Adjust label position and size
  
  ## Print the plot in RStudio
  print(m)
  
}
```


# Adding labels to pie chart above
```{r}
## MALES
# Get a vector of unique Cancer.Type values
cancer_types <- unique(all_cancers_sex_genes_tpm$Cancer.Type)

# Loop through each Cancer.Type and run the same pipeline
for (cancer in cancer_types) {
  
  # Filter MALE samples and Primary Tumor sample type for each Cancer.Type
  male_data_pie_conservative <- all_cancers_sex_genes_tpm %>%
    filter(gender == "MALE", sample_type == "Primary Tumor", Cancer.Type == cancer)
  
  # Calculate total number of MALEs for the current Cancer.Type
  total_males_pie_conservative <- male_data_pie_conservative %>%
    filter(gender == "MALE") %>%
    nrow()
  
  # If no males in this cancer type, skip the loop
  if (total_males_pie_conservative == 0) {
    next
  }
  
  # Summarize the count of each 'conservative_calls' category within MALE samples
  male_counts_pie_conservative <- male_data_pie_conservative %>%
    group_by(conservative_calls) %>%
    summarize(count = n()) %>%
    mutate(percentage = (count / total_males_pie_conservative) * 100)
  
  # Modify the custom labels in the data frame
  male_counts_pie_conservative <- male_counts_pie_conservative %>%
    mutate(
      conservative_calls = factor(conservative_calls, levels = c("XY", "X", "XaXi Y", "XaXi")),
      label = case_when(
        conservative_calls == "XY" ~ paste0("XY: ", round(percentage, 2), "%"),
        conservative_calls == "XaXi" ~ paste0("High XIST, XaXi: ", round(percentage, 2), "%"),
        conservative_calls == "XaXi Y" ~ paste0("High XIST, Y expressed: ", round(percentage, 2), "%"),
        conservative_calls == "X" ~ paste0("Loss of Y or downregulation: ", round(percentage, 2), "%"),
        TRUE ~ paste0(round(percentage, 1), "%")  # Default for other categories
      )
    )
  
  # Define the custom color scheme as a named vector
  color_scheme_males <- c(
    "XaXi" = "grey",
    "XO/XaXa" = "purple",
    "XY" = "lightgreen",
    "X" = "purple",
    "XO/XaXa Y" = "grey",
    "XaXi Y" = "grey"
  )
  
  # Create the pie chart with custom colors and label formatting
  m <- ggplot(male_counts_pie_conservative, aes(x = "", y = count, fill = conservative_calls)) +
    geom_bar(stat = "identity", width = 1, color = "black") +  # Add black lines between the slices
    coord_polar(theta = "y") +  # Convert the bar chart into a pie chart
    theme_void() +  # Remove background, gridlines, and axis
    labs(title = paste0("TCGA Inferred Sex Chromosome Complements Distribution in MALE Samples\n",
                        "(Conservative Calls for ", cancer, ")")) +
    
    # Apply custom color scheme and custom legend labels
    scale_fill_manual(
      values = color_scheme_males,  # Custom color scheme
      labels = c(
        "XY" = "XIST not expressed and chrY expressed",
        "X" = "XIST not expressed and chrY not expressed",
        "XaXi Y" = "XIST expressed and chrY expressed",
        "XaXi" = "XIST expressed and chrY not expressed"
      )
    ) +
    
    # Label to best fit pie charts using repel method
    geom_label_repel(
      aes(label = label),
      size = 2.5, show.legend = FALSE,
      position = position_stack(vjust = 0.5),
      #nudge_x = 0.05,  # Adjust to shift left or right
      #nudge_y = 1.5,  # Adjust to shift vertically
      #direction = "y",
      #force = 2,  # Increase force for more separation
      segment.size = 0,  # Remove connecting lines
      segment.color = NA,  # Ensure no line segments
      data = subset(male_counts_pie_conservative, conservative_calls %in% c("XY", "X", "XaXi", "XaXi Y"))
      )
  
  # Print the plot in RStudio
  print(m)
  
  # Save pie chart as PNG and PDF
  ggsave(filename = paste0("conservative_males_piechart_", cancer, ".png"), plot = m, dpi = 300)
  ggsave(filename = paste0("conservative_males_piechart_", cancer, ".pdf"), plot = m)
}
```




## Summarizing the Conservative Calls for each inferred sex chromosome combination by gender and Cancer
### Conservative Calls
```{r}
# Get unique Cancer.Types and their corresponding Cancer.Name
cancer_types <- unique(all_cancers_sex_genes_tpm$Cancer.Type)

# Create an empty list to store results for each Cancer.Type
summary_list <- list()

# Loop through each Cancer.Type
for (cancer in cancer_types) {
  
  # Get the corresponding full Cancer.Name
  cancer_name <- unique(all_cancers_sex_genes_tpm %>% 
                          filter(Cancer.Type == cancer) %>%
                          pull(Cancer.Name))

  # Filter for 'Primary Tumor' sample types only for the current Cancer.Type
  primary_tumor_data <- all_cancers_sex_genes_tpm %>%
    filter(sample_type == "Primary Tumor", Cancer.Type == cancer)
  
  # For FEMALE samples
  female_summary <- primary_tumor_data %>%
    filter(gender == "FEMALE") %>%
    group_by(conservative_calls) %>%
    summarise(count = n()) %>%
    ungroup() %>%
    mutate(Expression = case_when(
      conservative_calls == "XaXi" ~ "XIST expressed and Y not expressed",
      conservative_calls == "XO/XaXa" ~ "XIST not expressed and Y not expressed",
      conservative_calls == "XaXi Y" ~ "XIST expressed and Y expressed",
      conservative_calls == "XO/XaXa Y" ~ "XIST not expressed and Y expressed"
    )) %>%
    mutate(Percentage = (count / sum(count)) * 100) %>%
    mutate(gender = "FEMALE", Cancer.Type = cancer, Cancer.Name = cancer_name) %>%
    select(Cancer.Name, Cancer.Type, gender, Expression, conservative_calls, count, Percentage)
  
  # For MALE samples
  male_summary <- primary_tumor_data %>%
    filter(gender == "MALE") %>%
    group_by(conservative_calls) %>%
    summarise(count = n()) %>%
    ungroup() %>%
    mutate(Expression = case_when(
      conservative_calls == "XY" ~ "XIST not expressed and Y expressed",
      conservative_calls == "X" ~ "XIST not expressed and Y not expressed",
      conservative_calls == "XaXi Y" ~ "XIST expressed and Y expressed",
      conservative_calls == "XaXi" ~ "XIST expressed and Y not expressed"
    )) %>%
    mutate(Percentage = (count / sum(count)) * 100) %>%
    mutate(gender = "MALE", Cancer.Type = cancer, Cancer.Name = cancer_name) %>%
    select(Cancer.Name, Cancer.Type, gender, Expression, conservative_calls, count, Percentage)
  
  # Combine FEMALE and MALE summaries
  combined_summary <- bind_rows(female_summary, male_summary)
  
  # Add the summary for this cancer type to the list
  summary_list[[cancer]] <- combined_summary
}

# Combine all summaries into one dataframe
pie_charts_summary_by_cancer_tcga <- bind_rows(summary_list)

# View final summary table
print(pie_charts_summary_by_cancer_tcga)

# Optionally, write the final summary to a CSV file
# write.csv(pie_charts_summary_by_cancer_tcga, "pie_charts_summary_by_cancer_tcga.csv", row.names = FALSE)
```




## Pie Charts of Inferred Sex Chromosome Complements Distributions using Conservative Calls 
### Excluding Gender Specific Cancers in FEMALE and MALE's Pie Charts
```{r}
## FEMALES gender specific cancer's: Cervical Squamous Cell Carcinoma and Endocervical Adenocarcinoma; Ovarian Serous Cystadenocarcinoma; Uterine Carcinosarcoma; Uterine Corpus Endometrial Carcinoma. 
# Filter FEMALE samples, Primary Tumor sample type, and exclude specific Cancer.Types
female_data_pie_conservative_exclusive <- all_cancers_sex_genes_tpm %>%
  filter(
    gender == "FEMALE",
    sample_type == "Primary Tumor",
    !Cancer.Name %in% c(
      "Cervical Squamous Cell Carcinoma and Endocervical Adenocarcinoma",
      "Ovarian Serous Cystadenocarcinoma",
      "Uterine Carcinosarcoma",
      "Uterine Corpus Endometrial Carcinoma"
    )
  )

# Calculate total number of FEMALEs
total_females_pie_conservative_exclusive <- female_data_pie_conservative_exclusive %>%
  filter(gender == "FEMALE") %>%
  nrow()

# Summarize the count of each 'conservative_calls' category within FEMALE samples
female_counts_pie_conservative_exclusive <- female_data_pie_conservative_exclusive %>%
  group_by(conservative_calls) %>%
  summarize(count = n()) %>%
  mutate(percentage = (count / total_females_pie_conservative_exclusive) * 100)

# Define the custom color scheme as a named vector
color_scheme_females <- c(
  "XaXi" = "lightgreen",
  "XO/XaXa" = "purple",
  "XY" = "lightgreen",
  "X" = "purple",
  "XO/XaXa Y" = "grey",
  "XaXi Y" = "grey"
)

# Create the pie chart with custom colors
ggplot(female_counts_pie_conservative_exclusive, aes(x = "", y = count, fill = conservative_calls)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar(theta = "y") +  # Convert the bar chart into a pie chart
  theme_void() +  # Remove background, gridlines, and axis
  labs(title = "Inferred Sex Chromosome Complements Distribution in FEMALE Samples\n(Conservative Calls - Exclusive of Gender Specific Cancers)") +
  scale_fill_manual(values = color_scheme_females) +  # Apply custom color scheme
  geom_text(aes(label = paste0(round(percentage, 1), "%")),  # Display percentage labels
            position = position_stack(vjust = 0.5), size = 3)  # Adjust label position and size
```


# Adding labels to pie chart above
```{r}
# Modify the custom labels in the data frame
female_counts_pie_conservative_exclusive <- female_counts_pie_conservative_exclusive %>%
  mutate(
    conservative_calls = factor(conservative_calls, levels = c("XaXi", "XO/XaXa", "XaXi Y", "XO/XaXa Y")),
    label = case_when(
      conservative_calls == "XaXi" ~ paste0("High XIST, XaXi: ", round(percentage, 2), "%"),
      conservative_calls == "XO/XaXa" ~ paste0("No inactivation, XaXa or XaO: ", round(percentage, 2), "%"),
      conservative_calls == "XaXi Y" ~ paste0("High XIST, Y expressed: ", round(percentage, 2), "%"),
      conservative_calls == "XO/XaXa Y" ~ paste0("No inactivation, XaXa or XaO, Y expressed: ", round(percentage, 2), "%"),
      TRUE ~ paste0(round(percentage, 2), "%")  # Default for other categories
    )
  )

# Create the pie chart with custom colors and updated legend names
conservative_females_piechart_exclusive <- ggplot(female_counts_pie_conservative_exclusive, aes(x = "", y = count, fill = conservative_calls)) +
  geom_bar(stat = "identity", width = 1, color = "black") +  # Add black lines between the slices
  coord_polar(theta = "y") +  # Convert the bar chart into a pie chart
  theme_void() +  # Remove background, gridlines, and axis
  labs(title = "TCGA Inferred Sex Chromosome Complements Distribution \nin FEMALE Samples (Conservative Calls - Exclusive of Gender Specific Cancers)") +
  
  # Apply custom color scheme and custom legend labels
  scale_fill_manual(
    values = color_scheme_females,  # Custom color scheme
    labels = c(
      "XaXi" = "XIST expressed and chrY not expressed",
      "XO/XaXa" = "XIST not expressed and chrY not expressed",
      "XaXi Y" = "XIST expressed and chrY expressed",
      "XO/XaXa Y" = "XIST not expressed and chrY expressed"
    )
  ) +  
  
  # Use geom_label_repel for improved label positioning
  geom_label_repel(
    aes(label = label),
    size = 2.5, show.legend = FALSE,
    position = position_stack(vjust = 0.5),
    #nudge_x = 0.5, direction = "y",  # Adjust nudge to place labels outside
    force = 1,   # Force of repelling
    segment.size = 0,  # Remove connecting lines
    segment.color = NA,  # Ensure no line segments
  )

conservative_females_piechart_exclusive

## Save pie chart
ggsave(filename = "conservative_females_piechart_exclusive.png", plot = conservative_females_piechart_exclusive, dpi = 300)

# Save as PDF
ggsave(filename = "conservative_females_piechart_exclusive.pdf", plot = conservative_females_piechart_exclusive)
```




```{r}
## MALES
# Filter MALE samples
male_data_pie_conservative_exclusive <- all_cancers_sex_genes_tpm %>%
  filter(
    gender == "MALE",
    sample_type == "Primary Tumor",
    !Cancer.Name %in% c(
      "Prostate Adenocarcinoma",
      "Testicular Germ Cell Tumors"
    )
  )

# Calculate total number of MALEs
total_males_pie_conservative_exclusive <- male_data_pie_conservative_exclusive %>%
  filter(gender == "MALE") %>%
  nrow()

# Summarize the count of each 'conservative_calls' category within MALE samples
male_counts_pie_conservative_exclusive <- male_data_pie_conservative_exclusive %>%
  group_by(conservative_calls) %>%
  summarize(count = n()) %>%
  mutate(percentage = (count / total_males_pie_conservative_exclusive) * 100)

# Define the custom color scheme as a named vector
color_scheme_males <- c(
  "XaXi" = "grey",
  "XO/XaXa" = "purple",
  "XY" = "lightgreen",
  "X" = "purple",
  "XO/XaXa Y" = "grey",
  "XaXi Y" = "grey"
)

# Create the pie chart with custom colors
ggplot(male_counts_pie_conservative_exclusive, aes(x = "", y = count, fill = conservative_calls)) +
  geom_bar(stat = "identity", width = 1) +
  coord_polar(theta = "y") +  # Convert the bar chart into a pie chart
  theme_void() +  # Remove background, gridlines, and axis
  labs(title = "Inferred Sex Chromosome Complements Distribution in MALE Samples\n(Conservative Calls - Exclusive of Gender Specific Cancers)") +
  scale_fill_manual(values = color_scheme_males) +  # Apply custom color scheme
  geom_text(aes(label = paste0(round(percentage, 1), "%")),  # Display percentage labels
            position = position_stack(vjust = 0.5), size = 3)  # Adjust label position and size
```


# Adding labels to pie chart above
```{r}
# Modify the custom labels in the data frame
male_counts_pie_conservative_exclusive <- male_counts_pie_conservative_exclusive %>%
  mutate(
    conservative_calls = factor(conservative_calls, levels = c("XY", "X", "XaXi Y", "XaXi")),
    label = case_when(
      conservative_calls == "XY" ~ paste0("XY: ", round(percentage, 2), "%"),
      conservative_calls == "XaXi" ~ paste0("High XIST, XaXi: ", round(percentage, 2), "%"),
      conservative_calls == "XaXi Y" ~ paste0("High XIST, Y expressed: ", round(percentage, 2), "%"),
      conservative_calls == "X" ~ paste0("Loss of Y or downregulation: ", round(percentage, 2), "%"),
      TRUE ~ paste0(round(percentage, 1), "%")  # Default for other categories
    )
  )

# Create the pie chart with custom colors and label formatting
conservative_males_piechart_exclusive <- ggplot(male_counts_pie_conservative_exclusive, aes(x = "", y = count, fill = conservative_calls)) +
  geom_bar(stat = "identity", width = 1, color = "black") +  # Add black lines between the slices
  coord_polar(theta = "y") +  # Convert the bar chart into a pie chart
  theme_void() +  # Remove background, gridlines, and axis
  labs(title = "TCGA Inferred Sex Chromosome Complements Distribution \nin MALE Samples (Conservative Calls - Exclusive of Gender Specific Cancers)") +
  
  # Apply custom color scheme and custom legend labels
  scale_fill_manual(
    values = color_scheme_males,  # Custom color scheme
    labels = c(
      "XY" = "XIST not expressed and chrY expressed",
      "X" = "XIST not expressed and chrY not expressed",
      "XaXi Y" = "XIST expressed and chrY expressed",
      "XaXi" = "XIST expressed and chrY not expressed"
    )
  ) +
  
  # Use geom_label_repel for the other labels to adjust their positioning
  geom_label_repel(
    aes(label = label),
    size = 2.5, show.legend = FALSE,
    position = position_stack(vjust = 0.5),
    force = 1,  # Increase force for more separation
    segment.size = 0,  # Remove connecting lines
    segment.color = NA,  # Ensure no line segments
  )

conservative_males_piechart_exclusive

## Save pie chart
ggsave(filename = "conservative_males_piechart_exclusive.png", plot = conservative_males_piechart_exclusive, dpi = 300)

# Save as PDF
ggsave(filename = "conservative_males_piechart_exclusive.pdf", plot = conservative_males_piechart_exclusive)
```



## Summarizing the Conservative counts for each inferred sex chromosome combination by gender, with exclusion of the gender specific cancers
### Conservative Calls
```{r}
# For FEMALE samples
female_summary_conservative_exclusive <- female_data_pie_conservative_exclusive %>%
  filter(gender == "FEMALE") %>%
  group_by(conservative_calls) %>%
  summarise(count = n()) %>%
  ungroup() %>%
  mutate(Expression = case_when(
    conservative_calls == "XaXi" ~ "XIST expressed and Y not expressed",
    conservative_calls == "XO/XaXa" ~ "XIST not expressed and Y not expressed",
    conservative_calls == "XaXi Y" ~ "XIST expressed and Y expressed",
    conservative_calls == "XO/XaXa Y" ~ "XIST not expressed and Y expressed"
  )) %>%
  mutate(Percentage = (count / sum(count)) * 100) %>%
  select(Expression, conservative_calls, count, Percentage)

# Write FEMALE summary to CSV
write.csv(female_summary_conservative_exclusive, "female_summary_conservative_exclusive.csv", row.names = FALSE)


# For MALE samples
male_summary_conservative_exclusive <- male_data_pie_conservative_exclusive %>%
  filter(gender == "MALE") %>%
  group_by(conservative_calls) %>%
  summarise(count = n()) %>%
  ungroup() %>%
  mutate(Expression = case_when(
    conservative_calls == "XY" ~ "XIST not expressed and Y expressed",
    conservative_calls == "X" ~ "XIST not expressed and Y not expressed",
    conservative_calls == "XaXi Y" ~ "XIST expressed and Y expressed",
    conservative_calls == "XaXi" ~ "XIST expressed and Y not expressed"
  )) %>%
  mutate(Percentage = (count / sum(count)) * 100) %>%
  select(Expression, conservative_calls, count, Percentage)

# Write MALE summary to CSV
write.csv(male_summary_conservative_exclusive, "male_summary_conservative_exclusive.csv", row.names = FALSE)
```
